/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laurentbleu;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.*;
import java.text.MessageFormat;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;
/**
 *
 * @author user_PC
 */
public class AppointmentList extends javax.swing.JFrame {

    PreparedStatement pst= null;
    ResultSet rs = null;
    Connection conn = null;
    InputStream is;
    FileOutputStream fos;
    int ID;
    
    
    /**
     * Creates new form AppointmentList
     */
    public AppointmentList() {
        initComponents();
        conn =JavaConnect.ConnectDb();
        Update_Table();
    }

    public void Close1(){
        WindowEvent windowClose = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowClose);
    }

    
    public void Update_Table(){
           try{
        String loginID =String.valueOf(LoginID.ID);
        String sql1 = "select privilege from stafflogin where s_id=?";
                pst = conn.prepareStatement(sql1);
                pst.setString(1, loginID);
                rs = pst.executeQuery();
                
                while (rs.next()){
                    int privilege = rs.getInt("privilege");
                     if(privilege == 0){
                        String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments";
                        pst=conn.prepareStatement(sql);
                        rs=pst.executeQuery();
                        appointments.setModel(DbUtils.resultSetToTableModel(rs));
                        ID = 0;
                
                     } if (privilege == 1){
                         String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments where dr_id=?";
                         pst=conn.prepareStatement(sql);
                         pst.setString(1, loginID);
                         rs=pst.executeQuery();
                         appointments.setModel(DbUtils.resultSetToTableModel(rs));
                         ID = 1;
                     }
                }
  
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
            System.out.println(ex);
        }finally {
            try {
                
                rs.close();
                pst.close();
                //conn.close();
            } catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        appointments = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        txtID = new javax.swing.JTextField();
        txtDrID = new javax.swing.JTextField();
        txtPID = new javax.swing.JTextField();
        rd2 = new javax.swing.JRadioButton();
        rd1 = new javax.swing.JRadioButton();
        rd3 = new javax.swing.JRadioButton();
        btnDownload = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Appointment list");

        appointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        appointments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                appointmentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(appointments);

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search option(s):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        txtID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIDActionPerformed(evt);
            }
        });

        rd2.setText("Doctor ID:");
        rd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd2ActionPerformed(evt);
            }
        });

        rd1.setText("Appointment ID:");
        rd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd1ActionPerformed(evt);
            }
        });

        rd3.setText("Patient ID:");
        rd3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rd3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rd2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtDrID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rd1)
                        .addGap(18, 18, 18)
                        .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rd1)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDrID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd2))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rd3)
                    .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48))
        );

        btnDownload.setText("Download");
        btnDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadActionPerformed(evt);
            }
        });

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/laurentbleu/logo-bleu.png"))); // NOI18N

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDownload, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 765, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(209, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(31, 31, 31))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnDownload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(173, Short.MAX_VALUE)))
        );

        setSize(new java.awt.Dimension(793, 420));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        try{
        String loginID =String.valueOf(LoginID.ID);
        String sql1 = "select privilege from stafflogin where s_id=?";
                pst = conn.prepareStatement(sql1);
                pst.setString(1, loginID);
                rs = pst.executeQuery();
                
                while (rs.next()){
                    int privilege = rs.getInt("privilege");
                     if(privilege == 0){
                        new Appointments().setVisible(true);
                        dispose();
                
                     } if (privilege == 1){
                         new DrMenu().setVisible(true);
                         dispose();
                         
                     }
                }
        } catch (Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String valueID = txtID.getText();
        String valueDrID = txtDrID.getText();
        String valuePID = txtPID.getText();
        System.out.println("1: "+ valueID);
        System.out.println("2: "+ valueDrID);
        System.out.println("3: "+ valuePID);
        
         if (rd1.isSelected()){
        /** ap_id **/
        try{
            
          
            String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments where ap_id =?"; // sql stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valueID);
            rs=pst.executeQuery(); // execute statement
            appointments.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            
        
           } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                   //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
        } else  if (rd2.isSelected()){
         
            if (ID == 1){
                JOptionPane.showMessageDialog(null, "You don't have the privilege to search other doctors!");
                
            } else if (ID == 0){
        /** DrID **/
             try{
            String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments where dr_id =?"; // sql stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valueDrID);
            rs=pst.executeQuery(); // execute statement
            appointments.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
            }
            } else if (rd3.isSelected()){
        
           /** PID **/
           if (ID == 0){
          try {
            String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments where p_id =?"; // sql stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valuePID);
            rs=pst.executeQuery(); // execute statement
            appointments.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
           } else if (ID == 1) {
               String DrID =String.valueOf(LoginID.ID);
              try {
            String sql = "select ap_id as 'Appointment ID', ap_date as 'Date', ap_slot as 'Time slot', dr_id as 'Doctor ID', dr_name as 'Doctor name', p_id as 'Patient ID', p_name as 'Patient name', ap_description as 'Description', ap_service as 'Service type', ap_attach as 'Attachment' from appointments where p_id =? and dr_id=?"; // sql stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valuePID);
            pst.setString(2,DrID);
            rs=pst.executeQuery(); // execute statement
            appointments.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            } 
           }
        } else { 
            JOptionPane.showMessageDialog(null, "Select a search option!");
        }
        
            
        
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed

        MessageFormat header = new MessageFormat("Print Report");
        MessageFormat footer = new MessageFormat("Laurent Bleu");

        try {
            appointments.print(JTable.PrintMode.NORMAL, header, footer); // adjust printing format

        } catch (java.awt.print.PrinterException ex){
            System.err.format("Cannot print! ", ex.getMessage());
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnDownloadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadActionPerformed
        
        String filename = txtID.getText() +"_"+ txtPID.getText()+".pdf";
        File file = new File(filename);
        
        try {   
            String sql = "select ap_attach from appointments where ap_id = ?";
            pst=conn.prepareStatement(sql);
            pst.setInt(1, Integer.parseInt(txtID.getText()));
            rs = pst.executeQuery();
             fos = new FileOutputStream(file);
            while(rs.next()) { // for each row
                is = rs.getBinaryStream("ap_attach");
                int r = 0;
                byte[] buffer = new byte[10024];
                while (is.read(buffer) > 0) {
                    fos.write(buffer);
                }
            }
            
            JOptionPane.showMessageDialog(null, "file downloaded to "+ file.getAbsolutePath());
            // RUN DOWNLOADED FILE
            Desktop.getDesktop().open(file);
            
 
            
            
        } catch (SQLException e) {
            System.err.println("Connection failed!");   
            e.printStackTrace();
        } catch (FileNotFoundException e) {
            System.err.println("File not found!");
            e.printStackTrace();
        } catch (IOException e) {
            System.err.println("File writing error..!");
            e.printStackTrace();
        }catch(Exception ex){
            //JOptionPane.showMessageDialog(null, "file not found cherck record");
            ex.printStackTrace();
        } finally { 
            if(rs != null){
                try {
                    is.close();
                    fos.flush();
                    fos.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, "file not found cherck record");
            ex.printStackTrace();
        }
            }
        } 
    }//GEN-LAST:event_btnDownloadActionPerformed

    private void appointmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_appointmentsMouseClicked
        /* to show the data in the testField when clicking on the row (inside the table) */
        try{
            int row = appointments.getSelectedRow(); // create object "row" to get the selected item from database
            String table_click = appointments.getModel().getValueAt(row, 0).toString(); // create object "table_click"  to get the module from table were mouse click
            
            String sql = "select * from appointments where ap_id= '"+ table_click +"' "; // sql query to get columns from table where the mouse click
            pst=conn.prepareStatement(sql); // command to do the statement
            rs=pst.executeQuery(); // execute the statement and get the result in "rs"
            
            /* add the data to textField */
            if (rs.next()){
                String add1 = rs.getString("ap_id"); // create object "add#" 
                txtID.setText(add1); // make textField "txtID" take values from "add#"
                String add2 = rs.getString("dr_id");
                txtDrID.setText(add2);
                String add3 = rs.getString("p_id");
                txtPID.setText(add3); 
                
            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e); // error msg 
        } finally {
            try {
                rs.close(); 
                pst.close();
               // conn.close();
            } catch (Exception e){
                JOptionPane.showMessageDialog(null, e);
                 }
        }
    }//GEN-LAST:event_appointmentsMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtPID.setText("");
        txtDrID.setText("");
        txtID.setText("");
        rd1.setSelected(false);
        rd2.setSelected(false);
        rd3.setSelected(false);
        Update_Table();
    }//GEN-LAST:event_btnClearActionPerformed

    private void rd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd1ActionPerformed
        rd2.setSelected(false);
        rd3.setSelected(false);
    }//GEN-LAST:event_rd1ActionPerformed

    private void rd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd2ActionPerformed
        rd1.setSelected(false);
        rd3.setSelected(false);
    }//GEN-LAST:event_rd2ActionPerformed

    private void rd3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd3ActionPerformed
        rd1.setSelected(false);
        rd2.setSelected(false);
    }//GEN-LAST:event_rd3ActionPerformed

    private void txtIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIDActionPerformed
        try {

        String sql = "select * from appointments where ap_id= ?";      
        pst = conn.prepareStatement(sql);
        pst.setString(1, txtID.getText());
        rs=pst.executeQuery();
        while (rs.next()){
            String add1 = rs.getString("p_id");
                txtPID.setText(add1);
                String add3 = rs.getString("dr_id");
                txtDrID.setText(add3);
                String add7 = rs.getString("p_id");
                txtPID.setText(add7);
        }                                        
            
    } catch (Exception ex){
            ex.printStackTrace();
            }finally {
            try {
                rs.close(); 
                pst.close();
               // conn.close();
            } catch (Exception e){
                JOptionPane.showMessageDialog(null, e);
                 }
        }
    }//GEN-LAST:event_txtIDActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppointmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppointmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppointmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppointmentList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppointmentList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable appointments;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDownload;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton rd1;
    private javax.swing.JRadioButton rd2;
    private javax.swing.JRadioButton rd3;
    private javax.swing.JTextField txtDrID;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtPID;
    // End of variables declaration//GEN-END:variables
}
