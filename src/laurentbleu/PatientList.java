/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package laurentbleu;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import java.sql.*;
import java.text.MessageFormat;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.proteanit.sql.DbUtils;

/**
 *
 * @author user_PC
 */
public class PatientList extends javax.swing.JFrame {

    PreparedStatement pst= null;
    ResultSet rs = null;
    Connection conn = null;
    /**
     * Creates new form PatientList
     */
    public PatientList() {
        initComponents();
        conn =JavaConnect.ConnectDb();
        Update_Table();
    }
    public void Close1(){
        WindowEvent windowClose = new WindowEvent(this,WindowEvent.WINDOW_CLOSING);
        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(windowClose);
    }

    
    public void Update_Table(){
        try {
           
            String sql = "select p_id as 'Patient ID', p_name as 'Name', p_address as 'Address', p_dob as 'Date of birth', p_gender as 'Gender', p_occupation as 'Occupation' from patients";
            pst=conn.prepareStatement(sql);
            rs=pst.executeQuery();
            patients.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
            System.out.println(ex);
        }finally {
            try {
                
                rs.close();
                pst.close();
                //conn.close();
            } catch (Exception ex){
            JOptionPane.showMessageDialog(null, ex);
        }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        patients = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        txtOccupation = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        txtPID = new javax.swing.JTextField();
        rd1 = new javax.swing.JRadioButton();
        rd2 = new javax.swing.JRadioButton();
        rd3 = new javax.swing.JRadioButton();
        rd4 = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        btnPrint = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Patients");

        patients.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patients.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(patients);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search option(s):", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N

        rd1.setText("Gender:");
        rd1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd1ActionPerformed(evt);
            }
        });

        rd2.setText("Occupation:");
        rd2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd2ActionPerformed(evt);
            }
        });

        rd3.setText("Address:");
        rd3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd3ActionPerformed(evt);
            }
        });

        rd4.setText("Patient ID:");
        rd4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rd4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rd3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rd2, javax.swing.GroupLayout.DEFAULT_SIZE, 129, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rd1)
                                    .addComponent(rd4))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtOccupation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtOccupation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd3))
                .addGap(6, 6, 6)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rd4))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/laurentbleu/logo-bleu.png"))); // NOI18N

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnPrint, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnPrint, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(20, 20, 20)))
                        .addGap(1, 24, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );

        setSize(new java.awt.Dimension(716, 494));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
try{
        String loginID =String.valueOf(LoginID.ID);
        String sql1 = "select privilege from stafflogin where s_id=?";
                pst = conn.prepareStatement(sql1);
                pst.setString(1, loginID);
                rs = pst.executeQuery();
                
                while (rs.next()){
                    int privilege = rs.getInt("privilege");
                     if(privilege == 0){
                        new StaffMenu().setVisible(true);  
                        dispose(); 
                
                     } if (privilege == 1){
                         new DrMenu().setVisible(true);
                         dispose();
                         
                     }
                }
        } catch (Exception ex){
            ex.printStackTrace();
        }
        
              
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        
        MessageFormat header = new MessageFormat("Print Report");
        MessageFormat footer = new MessageFormat("Laurent Bleu");
        
        try {
            patients.print(JTable.PrintMode.NORMAL, header, footer); // adjust printing format
            
        } catch (java.awt.print.PrinterException ex){
            System.err.format("Cannot print! ", ex.getMessage());
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        String valuePID = txtPID.getText();
        String valueGender = txtGender.getText();
        String valueOccupation = txtOccupation.getText();
        String valueAddress = txtAddress.getText();
        if (rd1.isSelected()){
        /** ap_id **/
        try{
            
          
            String sql = "select p_id as 'Patient ID', p_name as 'Name', p_address as 'Address', p_dob as 'Date of birth', p_gender as 'Gender', p_occupation as 'Occupation' from patients where p_gender =?"; // sql stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valueGender);
            rs=pst.executeQuery(); // execute statement
            patients.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            
        
           } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                   //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
        } else  if (rd2.isSelected()){
         
        /** DrID **/
             try{
            String sql = "select p_id as 'Patient ID', p_name as 'Name', p_address as 'Address', p_dob as 'Date of birth', p_gender as 'Gender', p_occupation as 'Occupation' from patients where p_occupation =?"; // sql stmt pst= conn.prepareStatement(sql); // prepare stmt
            pst= conn.prepareStatement(sql); // prepare stmt
            pst.setString(1,valueOccupation);
            rs=pst.executeQuery(); // execute statement
            patients.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
        } else if (rd3.isSelected()){
        
           
          try {
           String sql = "select p_id as 'Patient ID', p_name as 'Name', p_address as 'Address', p_dob as 'Date of birth', p_gender as 'Gender', p_occupation as 'Occupation' from patients where p_address =?"; // sql stmtpst= conn.prepareStatement(sql); // prepare stmt
           pst= conn.prepareStatement(sql); // prepare stmt 
           pst.setString(1,valueAddress);
            rs=pst.executeQuery(); // execute statement
            patients.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
        } else if (rd4.isSelected()){
        
           /** PID **/
          try {
           String sql = "select p_id as 'Patient ID', p_name as 'Name', p_address as 'Address', p_dob as 'Date of birth', p_gender as 'Gender', p_occupation as 'Occupation' from patients where p_id =?"; // sql stmtpst= conn.prepareStatement(sql); // prepare stmt
           pst= conn.prepareStatement(sql); // prepare stmt 
           pst.setString(1,valuePID);
            rs=pst.executeQuery(); // execute statement
            patients.setModel(DbUtils.resultSetToTableModel(rs)); // connect data from stmt and display it in the "StaffTable"
            } catch (Exception ex){
         ex.printStackTrace();   
        }finally { 
            
                try {
                    pst.close();
                    rs.close();
                    //conn.close();
                
        } catch (Exception ex){
            ex.printStackTrace();
        }
            }
        } else { 
            JOptionPane.showMessageDialog(null, "Select a search option!");
        }
        
    }//GEN-LAST:event_btnSearchActionPerformed

    private void patientsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientsMouseClicked
         /* to show the data in the testField when clicking on the row (inside the table) */
        try{
            int row = patients.getSelectedRow(); // create object "row" to get the selected item from database
            String table_click = patients.getModel().getValueAt(row, 0).toString(); // create object "table_click"  to get the module from table were mouse click
            
            String sql = "select * from patients where p_id= '"+ table_click +"' "; // sql query to get columns from table where the mouse click
            pst=conn.prepareStatement(sql); // command to do the statement
            rs=pst.executeQuery(); // execute the statement and get the result in "rs"
            
            /* add the data to textField */
            if (rs.next()){
                String add1 = rs.getString("p_occupation"); // create object "add#" 
                txtOccupation.setText(add1); // make textField "txtID" take values from "add#"
                String add2 = rs.getString("p_address");
                txtAddress.setText(add2);
                String add3 = rs.getString("p_gender");
                txtGender.setText(add3); 
                String add4 = rs.getString("p_id");
                txtPID.setText(add4);
                
            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(null, e); // error msg 
        } finally {
            try {
                rs.close(); 
                pst.close();
               // conn.close();
            } catch (Exception e){
                JOptionPane.showMessageDialog(null, e);
                 }
        }
    }//GEN-LAST:event_patientsMouseClicked

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
       txtOccupation.setText("");
       txtGender.setText("");
       txtAddress.setText("");
       txtPID.setText("");
       rd1.setSelected(false);
       rd2.setSelected(false);
       rd3.setSelected(false);
       rd4.setSelected(false);
       Update_Table();
    }//GEN-LAST:event_btnClearActionPerformed

    private void rd1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd1ActionPerformed
        rd2.setSelected(false);
        rd3.setSelected(false);
        rd4.setSelected(false);
    }//GEN-LAST:event_rd1ActionPerformed

    private void rd2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd2ActionPerformed
        rd1.setSelected(false);
        rd3.setSelected(false);
        rd4.setSelected(false);
    }//GEN-LAST:event_rd2ActionPerformed

    private void rd3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd3ActionPerformed
        rd1.setSelected(false);
        rd2.setSelected(false);
        rd4.setSelected(false);
    }//GEN-LAST:event_rd3ActionPerformed

    private void rd4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rd4ActionPerformed
        rd1.setSelected(false);
        rd2.setSelected(false);
        rd3.setSelected(false);
    }//GEN-LAST:event_rd4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PatientList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PatientList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PatientList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PatientList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PatientList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable patients;
    private javax.swing.JRadioButton rd1;
    private javax.swing.JRadioButton rd2;
    private javax.swing.JRadioButton rd3;
    private javax.swing.JRadioButton rd4;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtOccupation;
    private javax.swing.JTextField txtPID;
    // End of variables declaration//GEN-END:variables
}
